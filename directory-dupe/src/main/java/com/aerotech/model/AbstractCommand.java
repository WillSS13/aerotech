package com.aerotech.model;

import java.io.File;
import java.io.IOException;

import com.aerotech.util.Util;

public abstract class AbstractCommand implements Command {
  protected File dir1;
  protected File dir2;

  public AbstractCommand(String dir1, String dir2) {
    this.dir1 = new File(dir1);
    this.dir2 = new File(dir2);
  }

  /*
   * Validates that the Files generated by the String arguments exist
   * 
   * @return true if both directories exist, false otherwise
   */
  @Override
  public boolean hasValidDirectories() {
    return dir1.exists() && dir2.exists();
  }

  /*
   * Begins the recursive processing of the directories and searching for
   * duplicates
   */
  @Override
  public void execute() {
    if (dir1.isDirectory()) {
      processDirectory(dir1, dir2);
    }
  }

  /*
   * Recursively compares the files/subfiles of dir1 against those of dir2
   * 
   * @param dir1 - the directory to process
   * 
   * @param dir2 - the directory to compare with
   */
  @Override
  public void processDirectory(File currentDir, File dir2) {
    for (File f : currentDir.listFiles()) {
      if (f.isDirectory()) {
        processDirectory(f, dir2);
      } else {
        searchDirectory(dir2, f);
      }
    }
  }

  /*
   * Recursively searches through the directories to find duplicate files and
   * executes the necessary command
   * 
   * @param dir - the directory to search
   * 
   * @param f - the file to compare
   */
  @Override
  public void searchDirectory(File dir, File f) {
    if (dir.isDirectory()) {
      for (File file : dir.listFiles()) {
        if (file.isDirectory()) {
          // Recursively search through dir2's subdirectories
          searchDirectory(file, f);
        } else if (file.isFile() && f.isFile()) {
          try {
            if (Util.sameContent(file, f)) {
              runCommand(file, f); // Executes the necessary command
            }
          } catch (IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }

}
